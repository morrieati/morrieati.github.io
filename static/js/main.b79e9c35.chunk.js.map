{"version":3,"sources":["pages/Home/index.js","pages/Me/index.js","App.js","serviceWorker.js","index.js","App.module.scss"],"names":["Home","Helmet","Me","className","styles","App","useState","document","title","setTitle","location","useLocation","useEffect","Blog","exact","path","Footer","SiteName","to","ArticleTitle","Links","Link","href","RouterApp","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"2QAaeA,EAVF,WACX,OACE,6BACE,kBAACC,EAAA,OAAD,KACE,0C,iBCQOC,EAVJ,WACT,OACE,yBAAKC,UAAWC,IAAOF,IACrB,kBAACD,EAAA,OAAD,KACE,gF,gBCAFI,EAAM,WAAO,IAAD,EACUC,mBAASC,SAASC,OAD5B,mBACTA,EADS,KACFC,EADE,KAGZC,EAAWC,cAKf,OAJAC,qBAAU,WACRH,EAASF,SAASC,SACjB,CAACE,IAGF,yBAAKP,UAAWC,IAAOS,MACrB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,KACjB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAM,OACX,kBAAC,EAAD,QAIJ,4BAAQZ,UAAWC,IAAOY,QACxB,kBAAC,IAAD,CAAMb,UAAWC,IAAOa,SAAUC,GAAI,KAAtC,oDACA,0BAAMf,UAAWC,IAAOe,cAAeX,GACvC,0BAAML,UAAWC,IAAOgB,OACpB,kBAAC,IAAD,CAAMjB,UAAWC,IAAOiB,KAAMH,GAAI,KAAlC,QACA,kBAAC,IAAD,CAAMf,UAAWC,IAAOiB,KAAMH,GAAI,OAAlC,MACA,uBAAGf,UAAWC,IAAOiB,KAAMC,KAAM,oCAAjC,cAeGC,EARG,WAChB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QChCcC,QACW,cAA7BC,OAAOf,SAASgB,UAEe,UAA7BD,OAAOf,SAASgB,UAEhBD,OAAOf,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASwB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BC,EAAOC,QAAU,CAAC,KAAO,kBAAkB,OAAS,oBAAoB,SAAW,sBAAsB,aAAe,0BAA0B,MAAQ,mBAAmB,KAAO,qB","file":"static/js/main.b79e9c35.chunk.js","sourcesContent":["import React from 'react'\nimport { Helmet } from 'react-helmet'\n\nconst Home = () => {\n  return (\n    <div>\n      <Helmet>\n        <title>Home</title>\n      </Helmet>\n    </div>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport styles from './Me.module.scss'\n\nconst Me = () => {\n  return (\n    <div className={styles.Me}>\n      <Helmet>\n        <title>关于我的一些事</title>\n      </Helmet>\n    </div>\n  )\n}\n\nexport default Me\n","import React, { useEffect, useState } from 'react'\nimport { Switch, Route, useLocation } from 'react-router'\nimport { BrowserRouter as Router, Link } from 'react-router-dom'\n\nimport Home from './pages/Home'\nimport Me from './pages/Me'\n\nimport styles from './App.module.scss'\n\nconst App = () => {\n  const [title, setTitle] = useState(document.title)\n\n  let location = useLocation()\n  useEffect(() => {\n    setTitle(document.title)\n  }, [location])\n\n  return (\n    <div className={styles.Blog}>\n      <Switch>\n        <Route exact path={'/'}>\n          <Home />\n        </Route>\n        <Route path={'/me'}>\n          <Me />\n        </Route>\n      </Switch>\n\n      <footer className={styles.Footer}>\n        <Link className={styles.SiteName} to={'/'}>护肝工程师的日常</Link>\n        <span className={styles.ArticleTitle}>{title}</span>\n        <span className={styles.Links}>\n            <Link className={styles.Link} to={'/'}>Home</Link>\n            <Link className={styles.Link} to={'/me'}>Me</Link>\n            <a className={styles.Link} href={'https://github.com/realMorrisLiu'}>GitHub</a>\n          </span>\n      </footer>\n    </div>\n  )\n}\n\nconst RouterApp = () => {\n  return (\n    <Router>\n      <App />\n    </Router>\n  )\n}\n\nexport default RouterApp\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Blog\":\"App_Blog__37825\",\"Footer\":\"App_Footer__eC581\",\"SiteName\":\"App_SiteName__2xPm7\",\"ArticleTitle\":\"App_ArticleTitle__Ry22j\",\"Links\":\"App_Links__2ITff\",\"Link\":\"App_Link__2stCx\"};"],"sourceRoot":""}